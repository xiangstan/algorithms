"""
ALgorithm: Rod Cutting - Bottom up approach

In the bottom-up technique, we start by filling the array from start. So, we will first initialize an array r and then we will iterate over it to fill it.

Now, the array r contains the maximum revenue that can pe generated by each length. For example, the 4th element of the array r contains the maximum revenue that can be generated by a rod of 4 units long. So to calculate it, we need to calculate the maximum of (c[i] + r[nâˆ’i]) for i ranging from 1 to 4. And thus, we need to iterate again for the different values of i.
"""

INITIAL = 1
r = [0] + [-1 * INITIAL] * 5

def max(x, y):
  if x > y:
    return x
  return y

def BottomUp(c, n):
  r = [0] * (n + 1)
  r[0] = 0

  for i in range(1, n + 1):
    maximum_revenue = -1 * INITIAL
    for j in range(1, i + 1):
      maximum_revenue = max(maximum_revenue, c[j] + r[i - j])
    r[i] = maximum_revenue
    print(f"Length {i}: maximum price is {r[i]}.")
  return r[n]

def main() :
  #array starting from 1, element at index 0 is fake
  c = [0, 10, 24, 30, 40, 45]
  print(r)
  print(BottomUp(c, len(c) - 1))

if __name__ == "__main__":
    main()
